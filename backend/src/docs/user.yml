paths:
  /users/:
    get:
      summary: Get all users
      tags:
        - User
      responses:
        '200':
          description: Successfully retrieved all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
              example:
                status: 200
                values:
                  - id: 1
                    email: john@example.com
                    password: "base64_encoded_password"
                    name: John
                    lastname: Doe
                    phone: "+1234567890"
                    role: "USER"
                    createdAt: "2024-04-24T19:04:51.000Z"
                    updatedAt: "2024-04-24T19:04:51.000Z"
                  - id: 2
                    email: alice@example.com
                    password: "base64_encoded_password"
                    name: Alice
                    lastname: Smith
                    phone: "+0987654321"
                    role: "ADMIN"
                    createdAt: "2024-04-25T08:12:34.000Z"
                    updatedAt: "2024-04-25T08:12:34.000Z"
                  - id: 3
                    email: bob@example.com
                    password: "base64_encoded_password"
                    name: Bob
                    lastname: Johnson
                    phone: "+1122334455"
                    role: "MANAGER"
                    createdAt: "2024-04-26T15:30:20.000Z"
                    updatedAt: "2024-04-26T15:30:20.000Z"
        '401':
          description: Unauthorized user
        '403':
          description: Access denied
        '404':
          description: Users not found
        '500':
          description: Error selecting users
    post:
      summary: Create a new user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  example: fdsfdsfsd432432@!
                name:
                  type: string
                  example: John
                lastname:
                  type: string
                  example: Doe
                phone:
                  type: string
                  example: "+1234567890"
                role:
                  type: string
                  example: USER
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  values:
                    type: string
                    example: "User created successfully"
        '401':
          description: Unauthorized user
        '403':
          description: Access denied
        '500':
          description: Error creating user
  /users/email:
    get:
      summary: Get user by email
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                  format: email
      responses:
        '200':
          description: Successfully retrieved the user by email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
              example:
                status: 200
                values:
                    id: 1
                    email: user@example.com
                    password: "base64_encoded_password"
                    name: John
                    lastname: Doe
                    phone: "+1234567890"
                    role: "USER"
                    createdAt: "2024-04-24T19:04:51.000Z"
                    updatedAt: "2024-04-24T19:04:51.000Z"
        '401':
          description: Unauthorized user
        '403':
          description: Access denied
        '404':
          description: User not found.
        '500':
          description: Error fetching user by email.
  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to retrieve
      responses:
        '200':
          description: Successfully retrieved the user by Id.
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
              example:
                status: 200
                values:
                    id: 1
                    email: john@example.com
                    password: "base64_encoded_password"
                    name: John
                    lastname: Doe
                    phone: "+1234567890"
                    role: "USER"
                    createdAt: "2024-04-24T19:04:51.000Z"
                    updatedAt: "2024-04-24T19:04:51.000Z"
        '401':
          description: Unauthorized user
        '404':
          description: User with this email not exist
        '500':
          description: Error selecting user
    patch:
      summary: Update user by ID
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                lastname:
                  type: string
                phone:
                  type: string
                role:
                  type: string
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  values:
                    type: string
                    example: "User updated successfully"
        '401':
          description: Unauthorized user
        '403':
          description: Access denied
        '404':
          description: User not found
    delete:
      summary: Delete user by ID
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  values:
                    type: string
                    example: "Deleted 1 user with ID 1"
        '401':
          description: Unauthorized user
        '403':
          description: Access denied
        '404':
          description: User not found